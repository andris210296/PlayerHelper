/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package downloaderhelper;

import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Path;
import java.util.ArrayList;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author aandermann
 */
public class Tela extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    public Tela() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnDownload = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEmailBody = new javax.swing.JTextPane();
        txtEmailBody.addMouseListener( new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent me) {
                lblQtd.setText(String.valueOf(getLinksFromCopyPaste().size()));

                String links = "";
                for(String string:getLinksFromCopyPaste()){
                    links+= string +"\n";
                }
                txtEmailBody.setText(links);
            }
        }
    );
    jLabel3 = new javax.swing.JLabel();
    lblQtd = new javax.swing.JLabel();
    jProgressBar1 = new javax.swing.JProgressBar();
    jLabel4 = new javax.swing.JLabel();
    lblFileName = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jLabel1.setText("Copy your e-mail content and click down here:");

    btnDownload.setText("Download");
    btnDownload.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDownloadActionPerformed(evt);
        }
    });

    txtEmailBody.setEditable(false);
    txtEmailBody.setAutoscrolls(false);
    txtEmailBody.setEnabled(false);
    txtEmailBody.setMaximumSize(new java.awt.Dimension(100, 100));
    jScrollPane2.setViewportView(txtEmailBody);

    jLabel3.setText("Quantity of downloadable content:");

    jProgressBar1.setStringPainted(true);

    jLabel4.setText("Downloading:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel3)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 900, Short.MAX_VALUE)
                    .addComponent(btnDownload))
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lblFileName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addGap(9, 9, 9)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(btnDownload)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQtd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel4)
                .addComponent(lblFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed

        if (getLinksFromCopyPaste().size() > 0) {
            JFileChooser chooser;
            int result;

            chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("Choose a destination");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

            chooser.setAcceptAllFileFilterUsed(false);

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                
                downloadLinks(chooser.getSelectedFile().toPath().toString(), getLinksFromCopyPaste());

            } else {
                System.out.println("No Selection ");
            }

        } else {
            JOptionPane.showMessageDialog(null, "You must have links to download");
        }

    }//GEN-LAST:event_btnDownloadActionPerformed

    private String getFileNameFromLink(String link) {

        String fileName = "";

        String[] linkArray = link.split("/");

        for (int i = 0; i < linkArray.length; i++) {
            if (linkArray[i].equals("fileName")) {
                return linkArray[i + 1];
            }
        }

        return fileName;
    }

    private List<String> getLinksFromCopyPaste() {
        Clipboard clipboard;

        clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();

        List links = new ArrayList();

        try {
            Object data = clipboard.getData(DataFlavor.allHtmlFlavor);
            Document document = Jsoup.parse(data.toString());

            Elements elements = document.select("a[href]");

            for (Element link : elements) {

                String stringLink = link.attr("abs:href");
                if (stringLink.contains("kaltura")) {
                    links.add(stringLink);
                }
            }

            return links;

        } catch (UnsupportedFlavorException | IOException ex) {
            ex.printStackTrace();
        }
        return links;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    private void downloadLinks(String path, List<String> links) {

        for (String downloadLinks : getLinksFromCopyPaste()) {

            String fileName = getFileNameFromLink(downloadLinks);
                                   
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new BackgroundWorker(downloadLinks, path + "\\" + fileName).execute();
                    
                }
            });
        }
    }

    public class BackgroundWorker extends SwingWorker<Void, Void> {

        String urlDownload;        
        String fileName;

        public BackgroundWorker(String urlDownload, String fileName) {

            this.urlDownload = urlDownload;
            this.fileName = fileName;
           
            addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {                      
                    lblFileName.setText(fileName);                    
                    jProgressBar1.setValue(getProgress());
                }
            });
        }

        @Override
        protected Void doInBackground() throws Exception {

            try {                           
                URL url = new URL(urlDownload);

                URLConnection conexion = url.openConnection();
                conexion.connect();
                int lenghtOfFile = conexion.getContentLength();                
                
                InputStream input = new BufferedInputStream(url.openStream());

                OutputStream output = new FileOutputStream(new File(fileName));                               
                
                byte data[] = new byte[1024];
                int count;

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    setProgress((int) ((total * 100) / lenghtOfFile));
                    output.write(data, 0, count); 
                }

                output.flush();
                output.close();
                input.close();                        
                        

            } catch (Exception ex) {
                System.err.println(ex);
            }

            return null;

        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JLabel lblQtd;
    private javax.swing.JTextPane txtEmailBody;
    // End of variables declaration//GEN-END:variables
}
